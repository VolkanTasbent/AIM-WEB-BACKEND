package com.example.aimagency.controller;

import com.example.aimagency.model.Etkinlik;
import com.example.aimagency.service.EtkinlikService;
import org.springframework.web.bind.annotation.*;
import java.util.List;


@RestController
@RequestMapping("/api/etkinlikler")
@CrossOrigin(origins = "*")
public class EtkinlikController {

    private final EtkinlikService service; // âœ… ArtÄ±k Service'i kullanÄ±yoruz

    public EtkinlikController(EtkinlikService service) {
        this.service = service;
    }

    // ðŸ”¹ 1. TÃœM ETKÄ°NLÄ°KLERÄ° GETÄ°R
    @GetMapping
    public List<Etkinlik> getAll() {
        return service.getAll(); // âœ… Repository deÄŸil Service Ã§aÄŸÄ±rÄ±lÄ±yor
    }

    // ðŸ”¹ 2. ID'ye gÃ¶re TEK ETKÄ°NLÄ°K GETÄ°R
    @GetMapping("/{id}")
    public Etkinlik getById(@PathVariable Long id) {
        return service.getById(id); // âœ… Service Ã¼zerinden Ã§ekiyoruz (birazdan ekleyeceÄŸiz)
    }

    // ðŸ”¹ 3. YENÄ° ETKÄ°NLÄ°K EKLE
    @PostMapping
    public Etkinlik add(@RequestBody Etkinlik etkinlik) {
        return service.save(etkinlik); // âœ… Service Ã¼zerinden kaydediyoruz
    }

    // ðŸ”¹ 4. ETKÄ°NLÄ°K SÄ°L
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id); // âœ… Service Ã¼zerinden siliyoruz
    }

    // ðŸ”¹ 5. ETKÄ°NLÄ°K GÃœNCELLE
    @PutMapping("/{id}")
    public Etkinlik update(@PathVariable Long id, @RequestBody Etkinlik yeniEtkinlik) {
        return service.update(id, yeniEtkinlik); // âœ… GÃ¼ncelleme iÅŸlemi Service'e taÅŸÄ±nÄ±r
    }
}
